@model WikiHash.Models.Articles.ArticleViewModel
@{
    ViewBag.Title = "Edit: " + Model.Title;
    var framesCounter = 0;
}
<div class="article-body">
    <div class="container-fluid">
        <div class="row">
            <div class="col-xl-2">
                <div class="contents-desktop d-none d-xl-block">
                    CONTENTS:
                    <ol contentList></ol>
                </div>
                <div class="contents-mobile noselect d-xl-none">
                    CONTENTS EDIT <span class="fa fa-caret-left" aria-hidden="true"></span>
                </div>
                <div class="contents-mobile-container d-xl-none">
                    <ol contentList></ol>
                    <button save-changes-button type="button" class="btn btn-primary">Save Changes</button>
                    <button new-section-button type="button" class="btn btn-secondary">New Section</button>
                </div>
                <button save-changes-button type="button" class="btn btn-primary save-changes-button d-none d-xl-block">Save Changes</button>
                <button new-section-button type="button" class="btn btn-secondary new-section-button d-none d-xl-block">New Section</button>
            </div>
            <div class="col content-body">
                <header>
                    <div class="article-title-container">
                        <h1 id="title" class="underlined">@Model.Title</h1>
                        <div class="row">
                            <div class="col-lg-3">
                                Tags (separate with commas):
                            </div>
                            <div class="col-lg">
                                <input id="tags-input" type="text" style="width: 100%" placeholder="tag1, tag2, tag3..." value="@Model.Body.MetaData.Tags" />
                            </div>
                        </div>
                    </div>
                </header>
                <article>
                    @foreach (var bodySection in Model.Body.Sections)
                    {
                        <section>
                            <h3 id="@WikiHash.Models.TitleFunctions.GenerateLink(bodySection.Title)"><input type="text" class="edit-input underlined" value="@bodySection.Title" /></h3>
                            <div class="section-edit-buttons noselect">
                                <span class="fa fa-caret-up" aria-hidden="true"></span>
                                <span class="fa fa-caret-down" aria-hidden="true"></span>
                                <span class="fa fa-trash remove-button" aria-hidden="true"></span>
                            </div>

                            <div class="row">

                                @foreach (var frame in bodySection.Frames)
                                {
                                    <div class="col-lg@{@WikiHash.Models.Articles.Bodies.FrameWidthParser.ToBootstrapString(frame.Width)} content-frame-editor-container"
                                         id="Frame-@framesCounter" data-width="@{@WikiHash.Models.Articles.Bodies.FrameWidthParser.ToString(frame.Width)}">
                                        <div class="content-frame content-frame-edit"
                                             type="@WikiHash.Models.Articles.Bodies.ContentTypeParser.ToString(frame.ContentType)"
                                             content="@frame.Content">
                                        </div>
                                        <div class="content-frame-edit-buttons noselect">
                                            <span class="fa fa-caret-up" aria-hidden="true"></span>
                                            <span class="fa fa-caret-down" aria-hidden="true"></span>
                                            <span class="fa fa-pencil" aria-hidden="true"
                                                  data-toggle="modal" data-target="#edit-frame-dialog"></span>
                                        </div>
                                    </div>

                                    framesCounter++;
                                }

                                <div class="col-lg noselect content-frame-editor-container">
                                    <div class="content-frame content-frame-edit-add">
                                        <span class="fa fa-plus" aria-hidden="true"></span>
                                    </div>
                                </div>
                            </div>
                        </section>
                    }

                    <div id="new-section-adding-place"></div>
                </article>
            </div>
        </div>
    </div>
</div>

<!--EDITOR DIALOG-->
@Html.Partial("_EditorDialogPartial")

<!--ALERTS-->
<div class="alerts-container">
    <div id="saved-alert" style="display: none;" class="alert alert-success alert-dismissible fade show">
        <button type="button" class="close">&times;</button>
        <strong>Saved!</strong> Article has been saved successfully.
    </div>
    <div id="save-error-alert" style="display: none;" class="alert alert-danger alert-dismissible fade show">
        <button type="button" class="close">&times;</button>
        <strong>Server side error!</strong> Article has not been saved.
    </div>
    <div id="connection-error-alert" style="display: none;" class="alert alert-danger alert-dismissible fade show">
        <button type="button" class="close">&times;</button>
        <strong>Connection error!</strong> Article has not been saved.
    </div>
</div>

@section scripts {
    @Scripts.Render("~/bundles/edit")
<script>
    FramesCounter = @framesCounter;

    loadTexts();

    var quill = new Quill("#quill", {
        theme: "snow",
        modules: {
            toolbar: toolbarOptions
        }
    });

    /*$("[contentFrame]:not([newContentFrame])").each(function () {
        var frame = $(this).find("div.content-frame[type='text']").first().get(0);
        if (frame != null) {
            var deltaText = frame.getAttribute("content");
            var delta = JSON.parse(deltaText);
            var editor = new Quill(frame);
            editor.setContents(delta);
            editor.enable(false);
        }
    });

    /*containers = $("[contentFrame][type='text']:not([newContentFrame])");
    var editors = Array.from(containers).map(function (container) {
        var deltaText = container.getAttribute("content");
        var delta = JSON.parse(deltaText);
        var editor = new Quill(container);
        editor.setContents(delta);
        editor.enable(false);
    });*/

    /*$("[contentFrame]:not([newContentFrame]):not(:has(media))").each(function () {
        var frame = getContentElement($(this)).get(0);
        var editor = new Quill(frame);
        editor.enable(false);
    });*/
</script>
}
